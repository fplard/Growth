[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement Support@Species360.org. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 John Doe Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/run-growth-models.html","id":"install-nimble","dir":"Articles","previous_headings":"","what":"Install nimble","title":"run growth models","text":"never used package nimble, first need install following recommendations ","code":""},{"path":"/articles/run-growth-models.html","id":"run-a-single-model","dir":"Articles","previous_headings":"","what":"Run a single model","title":"run growth models","text":"function Gro_run() allows run one growth model. function takes arguments: x index formula use dat including least numeric columns Age, MeasurementValue AnimalAnonID all_mods vector model names. following models supported : logistic, gompertz, tpgm, power, richards, vonbertalanffy. random list model names giving parameters included individual random effect run: list Bayesian parameters including nch number chains, nthin interval iterations keep, nburnin number iterations discard niter total number iterations. default number iterations small need increased reach convergence. model index x used run model. function returns: model list including estimates coefficients model characteristics tab data frame information model wAIC","code":"age <- rnorm(10000, 0, 1) id1 =  rnorm(21,0, 0.5) id2 =  rnorm(21,0, 0.4) id3 =  rnorm(21,0, 0.3) IND =sample(c(1:20), 100, replace = TRUE) z <- 0.2+ id1[IND]+ (15 + id2[IND])* (1 - exp(-(1+ id3[IND]) * age)) +   rnorm(100, 0, 0.01) dat = data.frame(age = age, z = z,                   IND = as.numeric(factor(IND ,labels = c(1:length(unique(IND))))) )  #Run a vonbertalanffy model including an individual effect on z0 out = Gro_run(1,                dat,               all_mods  = c(\"vonbertalanffy\"),               random = c(\"z0\"),               run = list(nit = 500, nburnin = 100, nthin = 10, nch = 3)) #> nimble version 1.3.0 is loaded. #> For more information on NIMBLE and a User Manual, #> please visit https://R-nimble.org. #>  #> Note for advanced users who have written their own MCMC samplers: #>   As of version 0.13.0, NIMBLE's protocol for handling posterior #>   predictive nodes has changed in a way that could affect user-defined #>   samplers in some situations. Please see Section 15.5.1 of the User Manual. #>  #> Attaching package: 'nimble' #> The following object is masked from 'package:stats': #>  #>     simulate #> The following object is masked from 'package:base': #>  #>     declare #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #>   [Warning] There are 1107 individual pWAIC values that are greater than 0.4. This may indicate that the WAIC estimate is unstable (Vehtari et al., 2017), at least in cases without grouping of data nodes or multivariate data nodes. out$tab #>       model_type random index Nparam     WAIC     lppd #> 1 vonbertalanffy     z0     1      7 18392206 -36070.8"},{"path":"/articles/run-growth-models.html","id":"growth-analysis-run-multiple-models","dir":"Articles","previous_headings":"","what":"Growth analysis: run multiple models","title":"run growth models","text":"function fits series growth models dataset, select best one wAIC. takes arguments: data_weight including least numeric columns Age, MeasurementValue AnimalAnonID all_mods indicating growth models need fit.following models supported : logistic, gompertz, tpgm, power, richards, vonbertalanffy. default = “vonBertalanffy” random list model names giving parameters include individual random effect. See example","code":"Age <- sample(c(0:10), 1000, replace = TRUE) MeasurementValue <- exp(0.2+15 * (1 - exp(-(0.1) * log(Age+1)))+ rnorm(1000,0,0.01))-1  AnimalAnonID <- sample(c(0:20), 100, replace = TRUE) dat = data.frame(Age = Age, MeasurementValue = MeasurementValue,                   AnimalAnonID = AnimalAnonID, MeasurementType = \"Live Weight\")  #Test 4 models: vonbertalanffy including an individual random effect on z0 #               vonbertalanffy including individual random effects on z0 and zinf #               gompertz including an individual random effect on gamma  #               gompertz including no individual random effect a = Gro_analysis(dat, all_mods  = c(\"vonbertalanffy\", \"gompertz\"),                  random = list(vonbertalanffy = c(\"z0\", \"z0, zinf\"), gompertz = c(\"gamma\", \"\")),                  run = list(nit = 1000, nburnin = 100, nthin = 1, nch = 1)) #>  * parallel has been set to FALSE, please wait more ! #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #>   [Warning] There are 5 individual pWAIC values that are greater than 0.4. This may indicate that the WAIC estimate is unstable (Vehtari et al., 2017), at least in cases without grouping of data nodes or multivariate data nodes. #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------|"},{"path":"/articles/run-growth-models.html","id":"growth-model-setting","dir":"Articles","previous_headings":"","what":"Growth Model Setting","title":"run growth models","text":"function gets parameter equations growth model takes arguments: data, data frame including least numeric columns age, z IND random name parameters must include individual random effect mod Name model fit. following models supported : logistic, gompertz, tpgm, power, richards, vonbertalanffy.","code":"age <- rnorm(100, 0, 1) z <- 0.2+ 15 * (1 - exp(-(1) * age)) +rnorm(100, 0, 0.01) dat = data.frame(age = age, z = z,IND =sample(c(0:20), 100, replace = TRUE) ) model <- Gro_ModSettings(data = dat, mod = \"vonbertalanffy\")"},{"path":"/articles/run-growth-models.html","id":"plot-model-prediction","dir":"Articles","previous_headings":"","what":"Plot model prediction","title":"run growth models","text":"function gives predicted values model plots check convergence model. takes arguments: data including least numeric columns Age, MeasurementValue AnimalAnonID result output named model Gro_run() Gro$analysis() returns following object: summaryshomwing mean, standard deviation, credible interval 95% Gelman-Rubin statistics Rhat parameter.  predictions giving mean estimates credible interval 95% age GOF: 4 tests goodness fit: “normal”: test residuals normally distributes ; “X”; test trend residual Age, “var”: Test trend variance residuals Age ,“conv”: check Rhat < 1.1 * plot_pred Plot predicted values, credible interval 95% grey data points. * convergence: Plots Bayesian chains * posterior: Plots posterior distribution parameter","code":"Age <- sample(c(0:10), 100, replace = TRUE) AnimalAnonID <- sample(c(0:20), 100, replace = TRUE) MeasurementValue <- exp(0.2+15 * (1 - exp(-(0.1) * log(Age+1)))+                            rnorm(100,0,0.01) + AnimalAnonID*0.1)-1  dat = data.frame(Age = Age, MeasurementValue = MeasurementValue,                   AnimalAnonID = AnimalAnonID, MeasurementType = \"Live Weight\")  out = Gro_analysis(dat,                     all_mods = c(\"vonbertalanffy\"),                    run = list(nit = 1000, nburnin = 100, nthin = 1, nch = 3)) #>  * parallel has been set to FALSE, please wait more ! #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #>   [Warning] There are 100 individual pWAIC values that are greater than 0.4. This may indicate that the WAIC estimate is unstable (Vehtari et al., 2017), at least in cases without grouping of data nodes or multivariate data nodes.  p <- Gro_pred(data = dat,                out = out$model,                title =out$wAIC_tab$model[1]) #> Registered S3 methods overwritten by 'ggpp': #>   method                  from    #>   heightDetails.titleGrob ggplot2 #>   widthDetails.titleGrob  ggplot2 p$summary #>                   mean           sd       QI 2.5      QI 97.5     Rhat #> mu_gamma  1.553454e-01  0.219129831 5.698775e-02   0.90074862 4.802228 #> mu_z0     4.118427e+00  4.585071490 3.580791e-02  17.96910144 1.440578 #> mu_zinf   1.459979e+02 35.092272436 8.162425e+01 211.11933912 1.797136 #> sigma_res 3.543928e-03  0.009446629 3.001142e-06   0.02926164 1.349719 p$predictions #> # A tibble: 102 × 4 #>      Age  mean Conf_Int_low Conf_Int_up #>    <dbl> <dbl>        <dbl>       <dbl> #>  1   0    4.12       0.0358        18.0 #>  2   0.1  6.10       1.35          23.9 #>  3   0.2  8.00       2.62          32.9 #>  4   0.3  9.83       3.85          41.5 #>  5   0.4 11.6        5.07          50.0 #>  6   0.5 13.3        6.29          57.9 #>  7   0.6 14.9        7.49          63.9 #>  8   0.7 16.5        8.68          70.3 #>  9   0.8 18.0        9.84          76.6 #> 10   0.9 19.5       11.0           82.0 #> # ℹ 92 more rows p$GOF #> $normal #> [1] TRUE #>  #> $X #> [1] TRUE #>  #> $var #> [1] TRUE #>  #> $conv #> [1] FALSE p$plot_pred p$convergence p$posterior"},{"path":[]},{"path":"/articles/useful-functions.html","id":"estimate-rhat-values","dir":"Articles","previous_headings":"Manipulate nimble outputs","what":"Estimate Rhat values","title":"Useful Functions","text":"function Rhatfun() allows take outputs nimble chains estimate Rubin Gelman convergence statistics.","code":"rb = array(rnorm(15*3*4), dim = c(15,3,4)) Rhatfun(rb, nch = 3, it = 15, nparam = 4) #> [1] 1.0206915 0.9709333 0.9400075 0.9679284"},{"path":"/articles/useful-functions.html","id":"summary","dir":"Articles","previous_headings":"Manipulate nimble outputs","what":"Summary","title":"Useful Functions","text":"function sum_nim() makes summary table main statistics parameter output chains Bayesian model","code":"rb = array(rnorm(15*3*4), dim = c(15,3,4)) sum_nim(rb, nch = 3) #>          mean       sd    QI 2.5  QI 97.5      Rhat #> 1  0.09619219 1.157270 -2.024822 2.507279 1.0841636 #> 2 -0.11454537 1.006133 -1.674106 1.459683 0.9758006 #> 3  0.18182322 1.098268 -1.796275 2.098465 0.9530246 #> 4  0.26837835 1.033190 -1.467862 2.060732 1.0475169"},{"path":"/articles/useful-functions.html","id":"histogram-for-posterior-distribution","dir":"Articles","previous_headings":"","what":"Histogram for posterior distribution","title":"Useful Functions","text":"function hist_post() prepares histogram ggplot posterior distribution given parameter. can used within codes plotting grids posterior distributions several parameters. takes numeric vector x argument.","code":"hist_post(rnorm(1000)) #> Registered S3 methods overwritten by 'ggpp': #>   method                  from    #>   heightDetails.titleGrob ggplot2 #>   widthDetails.titleGrob  ggplot2"},{"path":"/articles/useful-functions.html","id":"plots-for-convergence","dir":"Articles","previous_headings":"","what":"Plots for convergence","title":"Useful Functions","text":"function conv_plot() prepares ggplot loog convergence posterior distribution given parameter. takes numeric vector x argument m number iteration.","code":"conv_plot(rnorm(1500), m =500)"},{"path":"/articles/useful-functions.html","id":"write-nimble-codes","dir":"Articles","previous_headings":"","what":"Write nimble codes","title":"Useful Functions","text":"function Gro_writenimblecode() writes nimble code growth model including individual random effect. takes argument: params names parameters model. model likelihood nimble model random name parameters must include individual random effect maxval list including maximum values prior parameter minval list including minimum values prior parameter","code":"#Example for a von bertalanffy model Gro_writenimblecode(params = c('z0', 'zinf', 'gamma'),                      model = \"for (j in 1:N){{        logz[j] ~dnorm(z0[IND[j]] + zinf[IND[j]] *         (1 - exp(- gamma[IND[j]] * logx[j])), sigma_res)}}\",                     random = \"gamma\",                     maxval = list(z0 = 5),                      minval= list(z0 = 0, zinf = 0, gamma = 0) ) #> expression(sigma_res ~ dunif(0, 5), mu_z0 ~ dunif(0, 5), for (i in 1:Nind) { #>     z0[i] <- mu_z0 #> }, mu_zinf ~ dunif(0, 1000), for (i in 1:Nind) { #>     zinf[i] <- mu_zinf #> }, mu_gamma ~ dunif(0, 1000), sigma_gamma ~ dunif(0, 5), for (i in 1:Nind) { #>     gamma[i] ~ dnorm(mu_gamma, sd = sigma_gamma) #> }, for (j in 1:N) { #>     { #>         logz[j] ~ dnorm(z0[IND[j]] + zinf[IND[j]] * (1 - exp(-gamma[IND[j]] *  #>             logx[j])), sigma_res) #>     } #> })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Floriane Plard. Author, maintainer, contractor. Species 360. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Plard F (2025). Growth: Bayesian Growth Analysis. R package version 0.0.0.9000.","code":"@Manual{,   title = {Growth: Bayesian Growth Analysis},   author = {Floriane Plard},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"growth","dir":"","previous_headings":"","what":"Bayesian Growth Analysis","title":"Bayesian Growth Analysis","text":"Growth can used run growth models including individual random effects clean dataset.","code":""},{"path":[]},{"path":"/index.html","id":"install-nimble","dir":"","previous_headings":"Installation","what":"Install nimble","title":"Bayesian Growth Analysis","text":"never used package nimble, first need install following recommendations can install development version Growth GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"fplard/Growth\")"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Bayesian Growth Analysis","text":"can open documentation locally machine using","code":"path <- system.file(\"docs\", \"index.html\", package = \"Growth\") browseURL(path)"},{"path":"/index.html","id":"simple-example","dir":"","previous_headings":"","what":"Simple example","title":"Bayesian Growth Analysis","text":"","code":"library(Growth) library(tidyverse)   ## basic example code #Create a simple data frame Age <- sample(c(0:10), 100, replace = TRUE) AnimalAnonID <- sample(c(0:20), 100, replace = TRUE) MeasurementValue <- 0.2+15 * (1 - exp(-(0.1) * Age))+                            rnorm(100,0,0.01) + AnimalAnonID*0.1  dat = data.frame(Age = Age, MeasurementValue = MeasurementValue,                   AnimalAnonID = AnimalAnonID, MeasurementType = \"Live Weight\")  #Test 4 models: vonbertalanffy including an individual random effect on z0 #               vonbertalanffy including individual random effects on z0 and zinf #               fabens including an individual random effect on gamma  #               fabens including no individual random effect out = Gro_analysis(dat, all_mods  = c(\"vonbertalanffy\", \"gompertz\"),                    random = list(vonbertalanffy = c(\"z0\", \"z0, zinf\"), gompertz = c(\"alpha\", \"\")),                    run = list(nit = 1000, nburnin = 100, nthin = 1, nch = 1))  #Look at best model predictions and convergence p <- Gro_pred(data = dat,                out = out$model,                title =out$wAIC_tab$model[1]) p$summary p$predictions p$GOF p$plot_pred p$convergence p$posterior"},{"path":[]},{"path":"/index.html","id":"on-your-own-computer","dir":"","previous_headings":"From data from the science extract","what":"On your own computer","title":"Bayesian Growth Analysis","text":"","code":"library(glue) library(ISRverse) library(tidyverse) library(nimble) library(Growth)"},{"path":"/index.html","id":"on-ucloud","dir":"","previous_headings":"From data from the science extract","what":"On Ucloud","title":"Bayesian Growth Analysis","text":"","code":"# Install libraries: instPacks <- installed.packages()[, 1] if (!\"snowfall\" %in% instPacks) {   install.packages(\"snowfall\") } if (!\"ggpubr\" %in% instPacks) {   install.packages(\"ggpubr\") } if (!\"bbmle\" %in% instPacks) {   install.packages(\"bbmle\") } if (!\"BasTA\" %in% instPacks) {   install.packages(\"BaSTA\") } if (!\"assertthat\" %in% instPacks) {   install.packages(\"assertthat\") } if (!\"glue\" %in% instPacks) {   install.packages(\"glue\") } if (!\"pbapply\" %in% instPacks) {   install.packages(\"pbapply\") } if (!\"ggpp\" %in% instPacks) {   install.packages(\"ggpp\") } if (!\"nimble\" %in% instPacks) {   install.packages(\"nimble\") } if (!\"checkmate\" %in% instPacks) {   install.packages(\"checkmate\") }  if (!\"paramDemo\" %in% instPacks) {   install.packages(\"/work/Species360/Rpackages/latestVersion/paramDemo_1.0.0.tar.gz\",                    type = \"source\", repos = NULL) } if (!\"ISRverse\" %in% instPacks) {   install.packages(\"/work/Species360/Rpackages/latestVersion/ISRverse_0.0.0.9000.tar.gz\",                     type = \"source\", repos = NULL) } if (!\"Growth\" %in% instPacks) {   install.packages(\"/work/Species360/Rpackages/latestVersion/Growth_0.0.0.9000.tar.gz\",                     type = \"source\", repos = NULL) } library(glue) library(ISRverse) library(tidyverse) library(Growth)"},{"path":"/index.html","id":"load-data","dir":"","previous_headings":"From data from the science extract","what":"Load Data","title":"Bayesian Growth Analysis","text":"","code":"# Path to the ZIMSdata directory: ZIMSdirdata <- \"/work/Species360/ZIMSdata_ext240829\"  extractDate =\"2024-08-29\"  taxa = \"Chondrichthyes\"  #Filters # Earliest date to include records minDate <- \"1980-01-01\" # Earliest birth date to include records minBirthDate <- \"1900-01-01\" #Whether to include only Global individuals Global = TRUE #Birth Type of Animals: \"Captive\", \"Wild\" or \"All\" Birth_Type = \"Captive\" #Maximum uncertainty accepted for birth dates, in days uncert_birth = 365   #Load all data for this taxa Data <- Load_Zimsdata(taxa = taxa, ZIMSdir = ZIMSdirdata,                        species = list(Chondrichthyes = \"All\"),                       Animal = TRUE,                       tables= c('Collection', \"Weight\", 'Parent', 'Move'))  Animal <- Prep_Animal(Data[[taxa]]$Animal, extractDate = extractDate, minBirthDate =minBirthDate)   #Choose Species List_species = unique(Data$Chondrichthyes$Animal$binSpecies) species =\"Rhinoptera bonasus\"  Dataspe <- select_species(species, Animal, Data[[taxa]]$Collection, uncert_birth = uncert_birth,                           Birth_Type = Birth_Type,                           minDate = minDate , extractDate = extractDate,                           Global = Global)"},{"path":"/index.html","id":"clean-data-and-look-for-outliers","dir":"","previous_headings":"From data from the science extract","what":"Clean data and look for outliers","title":"Bayesian Growth Analysis","text":"","code":"# General directory: analysisDir <- glue (\"/work/Species360/growth/\") #Directory where to save results SaveDir = glue (\"{analysisDir}savegrowth\") PlotDir = glue (\"{analysisDir}plotgrowth\")   #Maximum uncertainty accepted for measurement dates: weight, in days uncert_date = 365  # Measure type to select MeasureType = \"Live weight\"  # Conditions to estimate age at sexual maturity minNrepro = 100   #Minimum number of birth records minNparepro = 30  #Minimum number of unique parent records  #Choose sex sx = \"All\" #can also be \"Female\" or \"Male\"  if(nrow(Dataspe$data)>0){   repr = list()   if(sx != \"All\"){     coresubset <- Dataspe$data%>%filter(SexType == sx)   }else{coresubset <- Dataspe$data}   if(nrow(coresubset)>0){     #Estimate age at sexual maturity     repr[[sx]] <- Rep_main(coresubset= coresubset, Data[[taxa]]$Collection,                             Data[[taxa]]$Parent, Data[[taxa]]$Move,                              Repsect = \"agemat\",                            BirthType_parent = Birth_Type, BirthType_offspring = Birth_Type,                             Global = Global,                             minNrepro = minNrepro, minNparepro =  minNparepro     )          agemat = NULL     if(length(repr[[sx]])>0){       if(repr[[sx]]$summary$amat_analyzed){         agemat =repr[[sx]]$agemat$ageMat       }     }          #Clean measures     ouput <- Gro_cleanmeasures(data = Data[[taxa]]$Weight, coresubse = coresubset,                                Birth_Type = Birth_Type, type =\"weight\",                                 uncert_date = uncert_date,                                MeasureType = MeasureType,                                mindate = minDate)     #Look for outliers     if(nrow(ouput$data)>0){       data_weight <- ouput$data%>%         Gro_remoutliers (taxa = taxa, ageMat = agemat, maxweight = NULL,                           variableid = \"AnimalAnonID\", min_Nmeasures = 7,                          perc_weight_min=0.2, perc_weight_max=2.5,                          IQR=2.75, minq=0.025, Ninterval_juv = 10)                     p1 <-Gro_outplot(data_weight, title = glue(\"{species} {sx}\"), ylimit = NULL, xlimit = NULL)       }            }   }  p1  #Remove outliers data_weight <- data_weight %>%filter(KEEP ==1)"},{"path":"/index.html","id":"run-growth-models","dir":"","previous_headings":"From data from the science extract","what":"Run growth models","title":"Bayesian Growth Analysis","text":"","code":"library(Growth)  #Models: \"logistic\", \"gompertz\", \"chapmanRichards\", \"vonBertalanffy\", \"gam\", and/or \"polynomial\" models_gro  = c(\"vonbertalanffy\", \"gompertz\") random = list(vonbertalanffy = c(\"z0\", \"z0, zinf\"), gompertz = c(\"gamma\", \"\")) run = list(nit = 1000, nburnin = 100, nthin = 1, nch = 1) # Conditions to run the growth analysis minNgro = 100 #Minimum number of weights minNIgro = 50 #Minimum number of individuals   if (nrow(data_weight) >= minNgro) {   if (length(unique(data_weight$AnimalAnonID)) >= minNIgro) {     #run analysis     out<- Growth::Gro_analysis(dat = data_weight ,                         all_mods = models_gro, random =random,                        run = run)          #Look at best model predictions and convergence     p <- Gro_pred(data = data_weight,                    out = out$model,                    title =out$wAIC_tab$model[1])   }          }  #Look at the wAIC table comparing all models out$wAIC_tab  #Look at the model prediction and convergence  ?Gro_pred p$summary p$predictions p$GOF p$plot_pred p$convergence p$posterior"},{"path":[]},{"path":"/index.html","id":"functions-to-simulate-data","dir":"","previous_headings":"Simulation to test functions","what":"functions to simulate data","title":"Bayesian Growth Analysis","text":"###Run simulation","code":"#Functions to simulate data vonbertalanffy <- function(N = 10000,Nind = 100,                               sd_z0 = 0, sd_gamma = 0,sd_zinf = 0,                             z0 = 0.2, zinf = 15, gamma = 0.5,                            sd_res = 0.01){ age <- runif(N, 0, 10) id1 =  rnorm(Nind,0, sd_z0) id2 =  rnorm(Nind,0, sd_zinf) id3 =  rnorm(Nind,0, sd_gamma) IND =sample(c(1:Nind), N, replace = TRUE) z <- z0+ id1[IND]+ (zinf + id2[IND])* (1 - exp(-(gamma+ id3[IND]) * age)) +   rnorm(N, 0,sd_res) dat = data.frame(Age = age, MeasurementValue = z,                   AnimalAnonID = as.numeric(factor(IND ,labels = c(1:length(unique(IND))))) ) return(dat) }  logistic <- function(N = 10000,Nind = 100,                             sd_zinf = 0, sd_gamma = 0, sd_xinfl = 0,                       xinfl = 2, zinf = 15, gamma = 0.5,                            sd_res = 0.01){ age <- runif(N, 0, 10) id1 =  rnorm(Nind,0, sd_xinfl) id2 =  rnorm(Nind,0, sd_zinf) id3 =  rnorm(Nind,0, sd_gamma) IND =sample(c(1:Nind), N, replace = TRUE) z <- (zinf + id2[IND])/ (1 + exp(-(gamma+ id3[IND]) * (age-(xinfl+ id1[IND])))) +   rnorm(N, 0, sd_res) dat = data.frame(Age = age, MeasurementValue = z,                   AnimalAnonID = as.numeric(factor(IND ,labels = c(1:length(unique(IND))))) ) return(dat) } gompertz <- function(N = 10000,Nind = 100,                             sd_alpha = 0, sd_zinf = 0, sd_gamma = 0,                       alpha = -0.7, zinf = 15, gamma = 0.5,                                                        sd_res = 0){ age <- runif(N, 0, 10) id1 =  rnorm(Nind,0, sd_alpha) id2 =  rnorm(Nind,0, sd_zinf) id3 =  rnorm(Nind,0, sd_gamma) IND =sample(c(1:Nind), N, replace = TRUE) z <-  (zinf + id2[IND])* exp(-(alpha+ id1[IND])* exp(-(gamma+ id3[IND]) * age)) +   rnorm(N, 0, sd_res) dat = data.frame(Age = age, MeasurementValue = z,                   AnimalAnonID = as.numeric(factor(IND ,labels = c(1:length(unique(IND))))) ) return(dat) } tpgm <- function(N = 10000,Nind = 100,                             sd_zinf = 0, sd_gamma = 0, sd_age0 = 0,  sd_h = 0,  sd_th = 0,                   age0 = 1, h = 1, th = 0.5, zinf = 15, gamma = 0.5,                                                        sd_res = 0.01){ age <- runif(N, 0, 10) id0 =  rnorm(Nind,0, sd_age0) idh =  rnorm(Nind,0, sd_h) idth =  rnorm(Nind,0, sd_th) id2 =  rnorm(Nind,0, sd_zinf) id3 =  rnorm(Nind,0, sd_gamma) IND =sample(c(1:Nind), N, replace = TRUE) z <- (zinf + id2[IND])*    (1 - exp(- (gamma+ id3[IND]) *(1- (h+idh[IND])/((age -(th+idth[IND]))^2+1)) *(age - (age0+id0[IND])))) +rnorm(N, 0, sd_res)                     dat = data.frame(Age = age, MeasurementValue = z,                   AnimalAnonID = as.numeric(factor(IND ,labels = c(1:length(unique(IND))))) ) return(dat) } power <- function(N = 10000,Nind = 100,                               sd_alpha0 = 0, sd_alpha1 = 0, sd_beta = 0,                   alpha0 = 9, alpha1 = 2.5, beta = 3.5,                                                        sd_res = 0.01){ age <- runif(N, 0, 10) id0 =  rnorm(Nind,0, sd_alpha0) id1 =  rnorm(Nind,0, sd_alpha1) idb =  rnorm(Nind,0, sd_beta) IND =sample(c(1:Nind), N, replace = TRUE) z <- (alpha0+id0[IND]) + (alpha1+id1[IND]) * (age^(beta+idb[IND]))+  rnorm(N, 0, sd_res) dat = data.frame(Age = age, MeasurementValue = z,                   AnimalAnonID = as.numeric(factor(IND ,labels = c(1:length(unique(IND))))) ) return(dat) } richards <- function(N = 10000,Nind = 100,                             sd_z0 = 0, sd_gamma = 0, sd_zinf = 0, sd_P = 0,                      z0 = 0.2, zinf = 15, gamma = 0.5,P = 0.1,                                   sd_res = 0){.01 age <- runif(N, 0, 10) id1 =  rnorm(Nind,0, sd_z0) id2 =  rnorm(Nind,0, sd_zinf) id3 =  rnorm(Nind,0, sd_gamma) idP =  rnorm(Nind,0, sd_P) IND =sample(c(1:Nind), N, replace = TRUE) z <- (zinf + id2[IND])* (1 -  (z0+ id1[IND])*exp(-(gamma+ id3[IND]) * age))^(P+idP[IND]) +   rnorm(N, 0, sd_res) dat = data.frame(Age = age, MeasurementValue = z,                   AnimalAnonID = as.numeric(factor(IND ,labels = c(1:length(unique(IND))))) ) return(dat) } library(Growth) Nsim = 5 N = 10000 Nind = 100 run = list(nit = 1000, nburnin = 100, nthin = 1, nch = 3)  #Maximum uncertainty accepted for measurement dates: weight, in days uncert_date = 365 models_gro  = c(\"logistic\", \"gompertz\", \"richards\", \"vonbertalanffy\", \"tpgm\", \"power\") random = list(logistic= c(\"\", \"zinf\", \"gamma\", \"zinf, gamma\"),               gompertz = c(\"\",\"zinf\", \"gamma\", \"zinf, gamma\"),               richards = c(\"\",\"z0\",\"gamma\", \"z0, gamma\"),               vonbertalanffy = c(\"\",\"z0\",\"gamma\", \"z0, gamma\", \"zinf\", \"z0, zinf\", \"zinf, gamma\", \"zinf, z0, gamma\"),                tpgm= c(\"zinf\",\"gamma\", \"zinf, gamma\"),               power = c(\"alpha0\",\"alpha1\", \"alpha0, alpha1\"))  funct = c(logistic, gompertz, richards, vonbertalanffy, tpgm, power) #Simulate data  TAB = tibble(sim=numeric(0),                   model_type=character(0),                   random=character(0),                   truemodel = character(0),                   truerandom =character(0),                 mu_z0 = numeric(0),                  mu_zinf = numeric(0),                 mu_gamma = numeric(0),                  mu_xinfl = numeric(0),                  mu_age0 = numeric(0),                  mu_alpha0 = numeric(0),                  mu_alpha1 = numeric(0),                 mu_h = numeric(0),                  mu_th = numeric(0),                  mu_P = numeric(0),                  mu_beta = numeric(0),                  mu_alpha = numeric(0),                 sigma_z0 = numeric(0),                  sigma_zinf = numeric(0),                 sigma_gamma = numeric(0),                  sigma_xinfl = numeric(0),                  sigma_age0 = numeric(0),                  sigma_alpha0 = numeric(0),                  sigma_alpha1 = numeric(0),                 sigma_h = numeric(0),                  sigma_th = numeric(0),                  sigma_P = numeric(0),                  sigma_beta = numeric(0),                  sigma_alpha = numeric(0),                 sigma_res= numeric(0))   for (fs in c(2,6)){    fun = funct[fs]   nfun = models_gro[fs] print(nfun)  for (rand in 1:length(random[[nfun]])){ print(rand)   sd1 = sd2 = sd3 = 0 if(rand == 2){sd1 = 0.3} if(rand == 3){sd2 = 0.2} if(rand == 4){sd2 = 0.2; sd1 = 0.6} if(rand == 5){sd3 = 0.2} if(rand == 6){sd3 = 0.2; sd1 = 0.6} if(rand == 7){sd2 = 0.2; sd3 = 0.4} if(rand == 8){sd2 = 0.2; sd3 = 0.2; sd1 = 0.4} for (sim in 1: Nsim){       dat <- fun[[1]](N,Nind,               sd1,  sd2, sd3)%>%drop_na%>%filter(MeasurementValue >0)    modelsgro = sample(models_gro,3, replace = FALSE)     modelsgro = unique(c(modelsgro, nfun))      rando = random[which(models_gro %in% modelsgro)]     #run analysis     out<- Growth::Gro_analysis(dat = dat ,                         all_mods = modelsgro, random =rando,                        run = run)        toplot = c(str_which(names(out$model$coef), \"mu\"),              str_which(names(out$model$coef), \"sigma\"))   beta_tt <- out$model$coef[,toplot]   print(out$wAIC_tab$model_type[1])      resrb <- sum_nim(as.matrix( beta_tt), out$model$run$nch)%>%     select(mean)%>%rownames_to_column%>%pivot_wider(names_from = rowname, values_from = mean)     a = random[[nfun]][rand]   TAB<- TAB%>%add_row(    tibble_row (sim = sim,                   model_type = out$wAIC_tab$model_type[1],                   random=out$wAIC_tab$random[1],                   truemodel = nfun,                   truerandom =a, resrb)   )       }     } save(TAB, file =\"ressimu2.Rdata\") }"},{"path":"/reference/Gro_ModSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Growth model settings — Gro_ModSettings","title":"Growth model settings — Gro_ModSettings","text":"function gets parameter equations growth model","code":""},{"path":"/reference/Gro_ModSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Growth model settings — Gro_ModSettings","text":"","code":"Gro_ModSettings(data, random = NULL, mod = \"vonbertalanffy\")"},{"path":"/reference/Gro_ModSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Growth model settings — Gro_ModSettings","text":"data data.frame including least numeric columns age z random vector character name parameters must include individual random effect mod character Name model fit. following models supported : logistic, gompertz, tpgm, power, richards, vonbertalanffy","code":""},{"path":"/reference/Gro_ModSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Growth model settings — Gro_ModSettings","text":"list including function growth model,  number parameter, names, initial values lowest possible values","code":""},{"path":"/reference/Gro_ModSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Growth model settings — Gro_ModSettings","text":"","code":"age <- rnorm(100, 0, 1) z <- 0.2+ 15 * (1 - exp(-(1) * age)) +rnorm(100, 0, 0.01) dat = data.frame(age = age, z = z,IND =sample(c(0:20), 100, replace = TRUE) ) model <- Gro_ModSettings(data = dat, mod = \"vonbertalanffy\")"},{"path":"/reference/Gro_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Growth model selection — Gro_analysis","title":"Growth model selection — Gro_analysis","text":"function fit series growth models dataset select best one wAIC.","code":""},{"path":"/reference/Gro_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Growth model selection — Gro_analysis","text":"","code":"Gro_analysis(   data_weight,   all_mods = c(\"vonbertalanffy\"),   random = list(),   logtransform = FALSE,   run = list(nit = 100, nburnin = 10, nthin = 1, nch = 1),   parallel = FALSE )"},{"path":"/reference/Gro_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Growth model selection — Gro_analysis","text":"data_weight data.frame including least numeric columns Age, MeasurementValue AnimalAnonID all_mods vector character indicating growth models need fit.following models supported :logistic, gompertz, tpgm, power, richards, vonbertalanffy. default = \"vonBertalanffy\" random list model names giving parameters include individual random effect. See example logtransform logical whether age measurement values log transform (+1 added avoid log(0)) run list Bayesian parameters. increased reach convergence nch number chains. nthin interval iterations keep. nburnin number iterations discard. nit total number iterations. parallel logical Whether model run parallel","code":""},{"path":"/reference/Gro_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Growth model selection — Gro_analysis","text":"list including: model: fit best model wAIC table model","code":""},{"path":"/reference/Gro_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Growth model selection — Gro_analysis","text":"","code":"Age <- sample(c(0:10), 1000, replace = TRUE) MeasurementValue <- exp(0.2+15 * (1 - exp(-(0.1) * log(Age+1)))+ rnorm(1000,0,0.01))-1  AnimalAnonID <- sample(c(0:20), 100, replace = TRUE) dat = data.frame(Age = Age, MeasurementValue = MeasurementValue,                   AnimalAnonID = AnimalAnonID, MeasurementType = \"Live Weight\")  #Test 4 models: vonbertalanffy including an individual random effect on z0 #               vonbertalanffy including individual random effects on z0 and zinf #               gompertz including an individual random effect on gamma  #               gompertz including no individual random effect a = Gro_analysis(dat, all_mods  = c(\"vonbertalanffy\", \"gompertz\"),                  random = list(vonbertalanffy = c(\"z0\", \"z0, zinf\"), gompertz = c(\"gamma\", \"\")),                  run = list(nit = 1000, nburnin = 100, nthin = 1, nch = 1)) #> \t* parallel has been set to FALSE, please wait more ! #> nimble version 1.3.0 is loaded. #> For more information on NIMBLE and a User Manual, #> please visit https://R-nimble.org. #>  #> Note for advanced users who have written their own MCMC samplers: #>   As of version 0.13.0, NIMBLE's protocol for handling posterior #>   predictive nodes has changed in a way that could affect user-defined #>   samplers in some situations. Please see Section 15.5.1 of the User Manual. #>  #> Attaching package: ‘nimble’ #> The following object is masked from ‘package:stats’: #>  #>     simulate #> The following object is masked from ‘package:base’: #>  #>     declare #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #>   [Warning] There are 1 individual pWAIC values that are greater than 0.4. This may indicate that the WAIC estimate is unstable (Vehtari et al., 2017), at least in cases without grouping of data nodes or multivariate data nodes. #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #>   [Warning] There are 10 individual pWAIC values that are greater than 0.4. This may indicate that the WAIC estimate is unstable (Vehtari et al., 2017), at least in cases without grouping of data nodes or multivariate data nodes. #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------|"},{"path":"/reference/Gro_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions and plots — Gro_pred","title":"Predictions and plots — Gro_pred","text":"Give predicted values model plots check convergence model","code":""},{"path":"/reference/Gro_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions and plots — Gro_pred","text":"","code":"Gro_pred(data, out, Cred_int = c(0.025, 0.975), title = \"\")"},{"path":"/reference/Gro_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions and plots — Gro_pred","text":"data data.frame including least numeric columns Age, MeasurementValue AnimalAnonID result output Gro_run() Cred_int numeric lower upper bound credible interval plot predict title character Title plot","code":""},{"path":"/reference/Gro_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions and plots — Gro_pred","text":"list including summaryshomwing mean, standard deviation, credible interval 95% Gelman-Rubin statistics Rhat parameter. predictions giving mean estimates credible interval 95% age GOF: 4 tests googness fit: \"normal\": test residuals normally distributes ; \"X\"; test trend residual Age, \"var\": Test trend variance residuals Age ,\"conv\": check Rhat < 1.1 plot_pred Plot predicted values, credible interval 95% grey data points. convergence: Plots Bayesian chains posterior: Plots posterior distribution parameter","code":""},{"path":"/reference/Gro_pred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictions and plots — Gro_pred","text":"","code":"Age <- sample(c(0:10), 100, replace = TRUE) AnimalAnonID <- sample(c(0:20), 100, replace = TRUE) MeasurementValue <- exp(0.2+15 * (1 - exp(-(0.1) * log(Age+1)))+                            rnorm(100,0,0.01) + AnimalAnonID*0.1)-1  dat = data.frame(Age = Age, MeasurementValue = MeasurementValue,                   AnimalAnonID = AnimalAnonID, MeasurementType = \"Live Weight\")  out = Gro_analysis(dat,                     all_mods = c(\"vonbertalanffy\"),                    run = list(nit = 1000, nburnin = 100, nthin = 1, nch = 3)) #> \t* parallel has been set to FALSE, please wait more ! #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #>   [Warning] There are 51 individual pWAIC values that are greater than 0.4. This may indicate that the WAIC estimate is unstable (Vehtari et al., 2017), at least in cases without grouping of data nodes or multivariate data nodes.  p <- Gro_pred(data = dat,                out = out$model,                title =out$wAIC_tab$model[1]) #> Registered S3 methods overwritten by 'ggpp': #>   method                  from    #>   heightDetails.titleGrob ggplot2 #>   widthDetails.titleGrob  ggplot2 p$summary #>                   mean           sd       QI 2.5      QI 97.5     Rhat #> mu_gamma  5.949081e-02  0.015344519 2.732279e-02   0.09500183 1.130053 #> mu_z0     2.317887e+00  2.410190288 4.007802e-02   9.03080982 1.128475 #> mu_zinf   2.316421e+02 61.477034516 1.555872e+02 425.25754508 1.722427 #> sigma_res 3.049626e-03  0.004925567 6.227654e-04   0.02500482 2.648070 p$predictions #> # A tibble: 102 × 4 #>      Age  mean Conf_Int_low Conf_Int_up #>    <dbl> <dbl>        <dbl>       <dbl> #>  1   0    2.32       0.0401        9.03 #>  2   0.1  3.60       1.35         10.2  #>  3   0.2  4.87       2.62         11.2  #>  4   0.3  6.13       3.87         12.3  #>  5   0.4  7.38       5.10         13.4  #>  6   0.5  8.63       6.27         14.5  #>  7   0.6  9.87       7.46         15.6  #>  8   0.7 11.1        8.65         16.7  #>  9   0.8 12.3        9.76         17.7  #> 10   0.9 13.5       10.9          18.9  #> # ℹ 92 more rows p$GOF #> $normal #> [1] TRUE #>  #> $X #> [1] TRUE #>  #> $var #> [1] TRUE #>  #> $conv #> [1] FALSE #>  p$plot_pred  p$convergence  p$posterior"},{"path":"/reference/Gro_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run growth model — Gro_run","title":"Run growth model — Gro_run","text":"Build run bayesian growth model x all_mods.","code":""},{"path":"/reference/Gro_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run growth model — Gro_run","text":"","code":"Gro_run(   x,   dat,   all_mods,   random = \"\",   run = list(nit = 100, nburnin = 10, nthin = 1, nch = 1) )"},{"path":"/reference/Gro_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run growth model — Gro_run","text":"x numeric index formula used build model dat data.frameincluding least numeric columns age, z IND all_mods vector characters model names. following models supported: logistic, gompertz, tpgm, power, richards, vonbertalanffy. random vector character length all_mods giving parameters included individual random effect run list Bayesian parameters. increased reach convergence nch number chains. nthin interval iterations keep. nburnin number iterations discard. nit total number iterations.","code":""},{"path":"/reference/Gro_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run growth model — Gro_run","text":"function returns list: model list including estimates coefficients model characteristics tab data frame information models & WAIC","code":""},{"path":"/reference/Gro_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run growth model — Gro_run","text":"","code":"age <- rnorm(10000, 0, 1) id1 =  rnorm(21,0, 0.5) id2 =  rnorm(21,0, 0.4) id3 =  rnorm(21,0, 0.3) IND =sample(c(1:20), 100, replace = TRUE) z <- 0.2+ id1[IND]+ (15 + id2[IND])* (1 - exp(-(1+ id3[IND]) * age)) +   rnorm(100, 0, 0.01) dat = data.frame(age = age, z = z,                   IND = as.numeric(factor(IND ,labels = c(1:length(unique(IND))))) )  #Run a vonbertalanffy model including an individual effect on z0 out = Gro_run(1,                dat,               all_mods  = c(\"vonbertalanffy\"),               random = c(\"z0\"),               run = list(nit = 500, nburnin = 100, nthin = 10, nch = 3)) #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #> |-------------|-------------|-------------|-------------| #> |-------------------------------------------------------| #>   [Warning] There are 1067 individual pWAIC values that are greater than 0.4. This may indicate that the WAIC estimate is unstable (Vehtari et al., 2017), at least in cases without grouping of data nodes or multivariate data nodes. out$tab #>       model_type random index Nparam    WAIC      lppd #> 1 vonbertalanffy     z0     1      7 7072836 -36252.12"},{"path":"/reference/Gro_writenimblecode.html","id":null,"dir":"Reference","previous_headings":"","what":"Write nimble code for growth model — Gro_writenimblecode","title":"Write nimble code for growth model — Gro_writenimblecode","text":"Write nimble code needed run growth model including random effects","code":""},{"path":"/reference/Gro_writenimblecode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write nimble code for growth model — Gro_writenimblecode","text":"","code":"Gro_writenimblecode(   params,   model,   random = c(),   maxval = list(),   minval = list() )"},{"path":"/reference/Gro_writenimblecode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write nimble code for growth model — Gro_writenimblecode","text":"params vector character names parameters model. model character likelihood nimble model random vector character name parameters must include individual random effect maxval list including maximum values prior parameter. Default value 1000. minval list including minimum values prior parameter.Default value 0.","code":""},{"path":"/reference/Gro_writenimblecode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write nimble code for growth model — Gro_writenimblecode","text":"character representing nimble model","code":""},{"path":"/reference/Gro_writenimblecode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write nimble code for growth model — Gro_writenimblecode","text":"","code":"#Example for a von bertalanffy model Gro_writenimblecode(params = c('z0', 'zinf', 'gamma'),                      model = \"for (j in 1:N){{        logz[j] ~dnorm(z0[IND[j]] + zinf[IND[j]] *         (1 - exp(- gamma[IND[j]] * logx[j])), sigma_res)}}\",                     random = \"gamma\",                     maxval = list(z0 = 5),                      minval= list(z0 = 0, zinf = 0, gamma = 0) ) #> expression(sigma_res ~ dunif(0, 5), mu_z0 ~ dunif(0, 5), for (i in 1:Nind) { #>     z0[i] <- mu_z0 #> }, mu_zinf ~ dunif(0, 1000), for (i in 1:Nind) { #>     zinf[i] <- mu_zinf #> }, mu_gamma ~ dunif(0, 1000), sigma_gamma ~ dunif(0, 5), for (i in 1:Nind) { #>     gamma[i] ~ dnorm(mu_gamma, sd = sigma_gamma) #> }, for (j in 1:N) { #>     { #>         logz[j] ~ dnorm(z0[IND[j]] + zinf[IND[j]] * (1 - exp(-gamma[IND[j]] *  #>             logx[j])), sigma_res) #>     } #> })"},{"path":"/reference/Growth-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Growth: Bayesian Growth Analysis — Growth-package","title":"Growth: Bayesian Growth Analysis — Growth-package","text":"Use bayesian approach builg growth model random effect.","code":""},{"path":"/reference/Growth-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Growth: Bayesian Growth Analysis — Growth-package","text":"Maintainer: Floriane Plard floriane.c.plard@gmail.com [contractor] contributors: Species 360 Support@Species360.org [copyright holder]","code":""},{"path":"/reference/Rhatfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Rhat values — Rhatfun","title":"Estimate Rhat values — Rhatfun","text":"Derived Rubin Gelman convergence statistics output chains Bayesian model","code":""},{"path":"/reference/Rhatfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Rhat values — Rhatfun","text":"","code":"Rhatfun(rb, nch, it, nparam)"},{"path":"/reference/Rhatfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Rhat values — Rhatfun","text":"rb array dimension 3 estimates output chains bayesian model. rows iterations, column different chains 3rd dimension parameters nch numeric number chains numeric number iterations nparam numeric number parameters","code":""},{"path":"/reference/Rhatfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Rhat values — Rhatfun","text":"numeric vector size nparam giving Rhat statistics parameter","code":""},{"path":"/reference/Rhatfun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Rhat values — Rhatfun","text":"","code":"rb = array(rnorm(15*3*4), dim = c(15,3,4)) Rhatfun(rb, nch = 3, it = 15, nparam = 4) #> [1] 1.003541 1.012623 1.014704 1.071096"},{"path":"/reference/conv_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot for convergence — conv_plot","title":"Plot for convergence — conv_plot","text":"Prepare histogram ggplot posterior distribution given parameter. used within codes plotting grids posterior distributions several parameters.","code":""},{"path":"/reference/conv_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot for convergence — conv_plot","text":"","code":"conv_plot(x, m)"},{"path":"/reference/conv_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot for convergence — conv_plot","text":"x numeric vector raw estimates parameters m numeric number iterations","code":""},{"path":"/reference/conv_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot for convergence — conv_plot","text":"plot","code":""},{"path":"/reference/conv_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot for convergence — conv_plot","text":"","code":"conv_plot(rnorm(1500), m =500)"},{"path":"/reference/hist_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram — hist_post","title":"Histogram — hist_post","text":"Prepare histogram ggplot posterior distribution given parameter. used within codes plotting grids posterior distributions several parameters.","code":""},{"path":"/reference/hist_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram — hist_post","text":"","code":"hist_post(x, namex = \"\", namelab = \"\")"},{"path":"/reference/hist_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram — hist_post","text":"x numeric vector raw estimates parameters namex character x axis label namelab character title label plot","code":""},{"path":"/reference/hist_post.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram — hist_post","text":"histogram plot","code":""},{"path":"/reference/hist_post.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Histogram — hist_post","text":"","code":"hist_post(rnorm(1000))"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/sum_nim.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary statistics — sum_nim","title":"Summary statistics — sum_nim","text":"Makes summary table main statistics parameter output chains Bayesian model","code":""},{"path":"/reference/sum_nim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary statistics — sum_nim","text":"","code":"sum_nim(rb2, nch)"},{"path":"/reference/sum_nim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary statistics — sum_nim","text":"rb2 array dimension 3 2 including estimates output chains bayesian model. dimension 3, rows iterations, columns different chains 3rd dimension parameters. dimension 2, rows iterations chains, columns parameters. nch numeric number chains","code":""},{"path":"/reference/sum_nim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary statistics — sum_nim","text":"summary matrix columns giving mean, sd, credible interval 2.5% 97.5%, Rubin Gelman Rhat statistic. different parameters lines.","code":""},{"path":"/reference/sum_nim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary statistics — sum_nim","text":"","code":"rb = array(rnorm(15*3*4), dim = c(15,3,4)) sum_nim(rb, nch = 3) #>          mean        sd    QI 2.5   QI 97.5      Rhat #> 1 -0.10010302 0.8500901 -2.113762 0.9943505 0.9762422 #> 2 -0.07693698 0.9108723 -1.700939 1.8045298 1.1128009 #> 3 -0.09291715 0.8085296 -1.466194 1.6887230 1.5905453 #> 4  0.09757712 1.1305616 -1.829556 1.8877281 1.3502183"},{"path":"/news/index.html","id":"growth-development-version","dir":"Changelog","previous_headings":"","what":"Growth (development version)","title":"Growth (development version)","text":"Initial CRAN submission.","code":""}]
